/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useThree, useFrame } from "@react-three/fiber";
import { a } from "@react-spring/three";

import scene from "../assets/3d/room.glb";

export function Room({ isRotating, setIsRotating, setCurrentStage, ...props }) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF(scene);
  const { actions } = useAnimations(animations, group);
  const { gl, viewport } = useThree();

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  useEffect(() => {
    console.log(actions);
    actions["Take 01"].play();
  }, [actions]);

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;

    lastX.current = clientX;
  };

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  };

  // Handle pointer (mouse or touch) move event
  const handlePointerMove = (event) => {
    event.stopPropagation();
    event.preventDefault();
    if (isRotating) {
      // If rotation is enabled, calculate the change in clientX position
      const clientX = event.touches ? event.touches[0].clientX : event.clientX;

      // calculate the change in the horizontal position of the mouse cursor or touch input,
      // relative to the viewport's width
      const delta = (clientX - lastX.current) / viewport.width;

      // Update the island's rotation based on the mouse/touch movement
      group.current.rotation.y += delta * 0.01 * Math.PI;

      // Update the reference for the last clientX position
      lastX.current = clientX;

      // Update the rotation speed
      rotationSpeed.current = delta * 0.01 * Math.PI;

      // Limit the rotation to -5.4 and 5.4
      group.current.rotation.y = Math.max(
        Math.min(group.current.rotation.y, 5.4),
        -5.4
      );

      // Set the current stage based on the island's orientation
      const rotation = group.current.rotation.y;
      switch (true) {
        case rotation <= 0.1 && rotation > -0.2:
          setCurrentStage(1);
          break;
        case (rotation <= -1.3 && rotation > -1.7) ||
          (rotation >= 4.4 && rotation < 4.9):
          setCurrentStage(2);
          break;
        case (rotation <= -2.9 && rotation > -3.3) ||
          (rotation >= 2.8 && rotation < 3.3):
          setCurrentStage(3);
          break;
        case (rotation <= -4.5 && rotation > -4.9) ||
          (rotation >= 1.2 && rotation < 1.8):
          setCurrentStage(4);
          break;
        default:
          setCurrentStage(null);
          console.log("rotation", rotation);
      }
    }
  };

  // Handle Keyboard action
  // const handleKeyDown = (e) => {
  //   if (e.key === "ArrowLeft") {
  //     if (!isRotating) setIsRotating(true);
  //     group.current.rotation.y += 0.01 * Math.PI;
  //     rotationSpeed.current = 0.0125;
  //   } else if (e.key === "ArrowRight") {
  //     if (!isRotating) setIsRotating(true);
  //     group.current.rotation.y -= 0.01 * Math.PI;
  //     rotationSpeed.current = -0.0125;
  //   }
  // };
  // const handleKeyUp = (e) => {
  //   if (e.key === "ArrowLeft" || e.key === "ArrowRight") setIsRotating(true);
  // };

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    // document.addEventListener("keyup", handleKeyUp);
    // document.addEventListener("keydown", handleKeyDown);

    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      // document.removeEventListener("keyup", handleKeyUp);
      // document.removeEventListener("keydow", handleKeyDown);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

  return (
    <a.group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="earth_hologram_(1)glb">
          <group
            name="Sketchfab_model"
            rotation={[-Math.PI / 2, 0, 0]}
            scale={0.007}
          >
            <group
              name="b10b0b2d3f0741fa8ef24abb7586b618fbx"
              rotation={[Math.PI / 2, 0, 0]}
            >
              <group name="Object_2">
                <group name="RootNode">
                  <group
                    name="earth"
                    position={[0, 107.024, 0]}
                    rotation={[-Math.PI / 2, 0, 3.133]}
                    scale={100}
                  />
                  <group
                    name="Camera"
                    position={[866.735, 607.999, -990.066]}
                    rotation={[-Math.PI, -0.852, 2.709]}
                    scale={100}
                  >
                    <group name="Object_7" />
                  </group>
                  <group
                    name="holo_room"
                    position={[0, -66.659, 0]}
                    rotation={[-Math.PI / 2, 0, 0]}
                    scale={[100, 100, 40]}
                  >
                    <mesh
                      name="holo_room_metal4_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.holo_room_metal4_0.geometry}
                      material={materials.metal4}
                    />
                    <mesh
                      name="holo_room_Purple_Emission_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.holo_room_Purple_Emission_0.geometry}
                      material={nodes.holo_room_Purple_Emission_0.material}
                    />
                    <mesh
                      name="holo_room_Blue_Emission_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.holo_room_Blue_Emission_0.geometry}
                      material={materials.Blue_Emission}
                    />
                    <mesh
                      name="holo_room_Orange_Emission_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.holo_room_Orange_Emission_0.geometry}
                      material={materials.Orange_Emission}
                    />
                    <mesh
                      name="holo_room_Yellow_Emission_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.holo_room_Yellow_Emission_0.geometry}
                      material={materials.Yellow_Emission}
                    />
                    <mesh
                      name="holo_room_metal_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.holo_room_metal_0.geometry}
                      material={materials.metal}
                    />
                    <mesh
                      name="holo_room_metal2_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.holo_room_metal2_0.geometry}
                      material={materials.metal2}
                    />
                    <mesh
                      name="holo_room_metal3_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.holo_room_metal3_0.geometry}
                      material={materials.metal3}
                    />
                  </group>
                  <group
                    name="boards"
                    position={[0, -30.397, 0]}
                    rotation={[-Math.PI / 2, 0, 0]}
                    scale={100}
                  >
                    <mesh
                      name="boards_metal_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.boards_metal_0.geometry}
                      material={materials.metal}
                    />
                    <mesh
                      name="boards_Blue_Emission_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.boards_Blue_Emission_0.geometry}
                      material={materials.Blue_Emission}
                    />
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
        <group name="earthglb" position={[0, 1, 0]}>
          <group name="earth_hologramglb">
            <group
              name="Sketchfab_model_1"
              rotation={[-Math.PI / 2, 0, 0]}
              scale={0.306}
            >
              <group name="Root">
                <group name="TERRE1" rotation={[0, 0, 1.133]} scale={3.27}>
                  <mesh
                    name="TERRE1_0"
                    castShadow
                    receiveShadow
                    geometry={nodes.TERRE1_0.geometry}
                    material={nodes.TERRE1_0.material}
                  />
                </group>
                <group name="Sphere002" rotation={[0, 0, -1.882]} scale={0.965}>
                  <mesh
                    name="Sphere002_0"
                    castShadow
                    receiveShadow
                    geometry={nodes.Sphere002_0.geometry}
                    material={materials["Material.006"]}
                  />
                </group>
                <group
                  name="Circle643"
                  rotation={[0.199, 1.386, 0.199]}
                  scale={4.787}
                >
                  <mesh
                    name="Circle643_0"
                    castShadow
                    receiveShadow
                    geometry={nodes.Circle643_0.geometry}
                    material={materials["Material.004"]}
                  />
                </group>
                <group
                  name="Circle455"
                  rotation={[0.189, 0.035, -0.15]}
                  scale={0.169}
                >
                  <mesh
                    name="Circle455_0"
                    castShadow
                    receiveShadow
                    geometry={nodes.Circle455_0.geometry}
                    material={materials["Material.007"]}
                    morphTargetDictionary={
                      nodes.Circle455_0.morphTargetDictionary
                    }
                    morphTargetInfluences={
                      nodes.Circle455_0.morphTargetInfluences
                    }
                  />
                </group>
                <group
                  name="Circle"
                  rotation={[0.736, 0.961, 0.736]}
                  scale={6.128}
                >
                  <mesh
                    name="Circle_0"
                    castShadow
                    receiveShadow
                    geometry={nodes.Circle_0.geometry}
                    material={materials["Material.010"]}
                  />
                  <group
                    name="Icosphere002"
                    position={[1, 0, 0]}
                    rotation={[0, 0, 2.265]}
                    scale={0.063}
                  >
                    <mesh
                      name="Icosphere002_0"
                      castShadow
                      receiveShadow
                      geometry={nodes.Icosphere002_0.geometry}
                      material={materials["Material.008"]}
                    />
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </a.group>
  );
}
